%{
#include <iostream>
#include <string>
#include <cstdlib> 
#include <map>
#include "polinom.hpp"  
  
using namespace std;

#define YYDEBUG 1

extern int yylex();
void yyerror(string s);


map<string, Polinom*> promenljive;
%}

%union{
  float f_vrednost;
  Polinom * poly_vrednost;
  std::string * str_vrednost;
}

%type<poly_vrednost> NizKoeficijenata polinom
%token<f_vrednost> BROJ
%token<str_vrednost> ID
%token DODELA EQ NEQ

%left '-' '+'
%left '*'
%right UMINUS


%%
program : program naredba '\n'
  | 
  ;
naredba: polinom  {  $1->ispisi();
                    delete $1;
}
  | ID DODELA polinom   {   
                          if (promenljive.find(*$1) != promenljive.end() )
                            delete promenljive[*$1];
                            
                          promenljive[*$1] = $3;
                          }
  | polinom  EQ polinom   {  if( $1->jednak(*$3))
                               cout << "True" << endl;
                             else 
                               cout << "False" << endl;   
                          }
  | polinom  NEQ polinom   {  if( ! $1->jednak(*$3))
                               cout << "True" << endl;
                             else 
                               cout << "False" << endl;   
                          }         
  | polinom '[' BROJ ']' {  cout << $1->vrednost($3) << endl;
                            delete $1; 
                          }                                                                    
  |   /* dozvolimo praznu naredbu da bi dopustio prazne redove u testu*/
  ;
  
polinom :   polinom '+' polinom {  $$ = saberi(*$1,*$3); 
                                    delete $1;
                                    delete $3;
}
  | polinom '*' polinom         { $$ = pomnozi(*$1,*$3); 
                                  delete $1;
                                    delete $3;
  }
  | polinom '-' polinom         {  $$ = oduzmi(*$1,*$3); 
                                  delete $1;
                                    delete $3;
  }
  | '-' polinom   %prec UMINUS    { $$ = uminus(*$2);
                                    delete $2;
  }
  | polinom '\''    { $$=$1; 
                      $$->izvod(); 
                      }
  | '$' polinom '|' BROJ   { $$= $2;  
                             $$->integral($4); }                    
  | '(' polinom ')'     { $$ = $2; }
  | '<' NizKoeficijenata '>'  { $$ = $2; }
  | ID          {  /** proveravamo da li postoji, ukoliko postoji pravimo kopiju, u suprotnom prijavljujemo gresku */
                  auto trazen  = promenljive.find(*$1);
                  if ( trazen != promenljive.end() )
                      $$ = new Polinom(trazen->second->get_koef());  /* koristimo konstruktor koji vec imamo */
                  else
                    yyerror("Nije definisana promenljiva "+*$1);    
            }
  ;

NizKoeficijenata : NizKoeficijenata ',' BROJ {
                      $$ = $1;
                      $$->dodaj($3);
                }
  | BROJ        {  $$ = new Polinom();
                   $$->dodaj($1); }
  ;
%%

int main(){
  yydebug =0;
  yyparse();
  
  return 0;
}

void yyerror(string s){
  cerr<< s<< endl;
  exit(EXIT_FAILURE);
}
