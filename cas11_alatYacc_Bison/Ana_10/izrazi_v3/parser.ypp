/* Ovaj parser gradimo koristeci viseznacnu gramatiku za aritmeticke izraze */

%{

#include <iostream>
#include <cstdlib>
#include <string>

/* Ukoliko zelimo da koristimo debagovanje i pratimo stanja parsera neophodno je da definisemo YYDEBUG i u main() funkciji da 
	izvrsimo dodelu yydebug =1 */
#define YYDEBUG 1

using namespace std;


/* Leksicki analizator - lex ce nam ga izgraditi */
extern int yylex();
/* Funkcija koja ispisuje poruku o gresci i prekida program  */
void yyerror(string s) ;
%}

/* Tip atributa simbola ce biti tip nekog od polja ove unije. */
%union{
	float vrednost;
}

/* Definisemo asocijativnost i prioritete operatora. */
%left '+' '-'
%left '*' '/' 
%left UMINUS

/* Pridruzujemo konkretno polje unije tokenu i neterminalu e */
%type <vrednost> e
/* tokenu dodeljujemo atribut */
%token <vrednost> BROJ
/* zadajemo aksiomu gramatike */
%start pocetak


%%
/* Pravila KSG sa pridruzenim semantickim akcijama 
 Dobra praksa je da se prvo svim pravilima pridruze prazne akcije, a da se potom zamenjuju sa konkretnim akcijama.
 Tako smo sigurni da se nigde nece izvrsavati podrazumevana akcija, a da tako nismo hteli. 
*/
pocetak: e 		{ cout << "Vrednost izraza je " << $1 << endl; }
	;
e : e '+' e  		{ $$  = $1 +$3;}
	| e '*' e		{ $$ = $1 * $3;}
	|  e '-' e		{ $$ = $1 - $3;}
	|  e '/' e		{ if( $3 == 0){
							yyerror("Deljenje nulom!");	
						} 
					  $$ = $1 / $3; }
/* Dodeljujemo pravilu prioritet. Koristeci debagovanje proveriti redosled primenjivanja pravila kada nije zadat prioritet i kada je prioritet dodeljen. */
	| '-' e %prec UMINUS	{ $$ = -$2; }
	| '(' e ')'     { $$ = $2; }
	| BROJ			{ $$ = $1;}
	; 
%%

int main(){
	if(yyparse() == 0)
		cout << "Uparen je aritmeticki izraz!" << endl;
	return 0;
}

void yyerror(string s) {
   cerr << s << endl;
   exit(EXIT_FAILURE);
 }

