%{

#include <iostream>
#include <cstdlib>
#include <string>
#include <map>
using namespace std;

#define YYDEBUG 1
extern int yylex();
void yyerror(string s);

map<string,int> tablica;

%}

%union{
	float vrednost;
	std::string* id;
}

%left '+' '-'
%left '*' '/'
%left UMINUS

%token print_token
%token <id> id_token
%token <vrednost> broj_token 

%type <vrednost> E

//%start Niz_naredbi


%%

/*gramatika */
Niz_naredbi: Niz_naredbi naredba '\n'
			| //ovo je epsilon
			;
naredba: print_token '(' E ')' { 
	cout << "Vrednost izraza: " << $3 << endl;
}
        | id_token '=' E {
	tablica[*$1] = $3;

	delete $1;
}
		;
E: E '+' E {$$ = $1 + $3;}
  | E '-' E {$$ = $1 - $3;}
  | E '*' E {$$ = $1 * $3;}
  | E '/' E { if($3 == 0){
			yyerror("Deljenje nulom!");
			}			
			$$ = $1 / $3;}
   | '-' E %prec UMINUS {$$ = -$2;}
   | '(' E ')' {$$ = $2;}
   | broj_token {$$ = $1;} //podrazumevano
   | id_token {
		
		auto i = tablica.find(*$1);
		if(i != tablica.end()){
			$$ = i->second;
		}
		else{
			cout << "Promenljiva " << *$1 << "nije definisana!" << endl;
			$$ = 0;
		}
		delete $1;
	}
   ;
%%

int main() {

	if(yyparse() == 0)
		cout << "Uparen je aritmeticki izraz" << endl;

	return 0;
}

void yyerror(string s){
	cerr << s << endl;
	exit(EXIT_FAILURE);
}
