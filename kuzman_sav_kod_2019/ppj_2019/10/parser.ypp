%{

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

#include "polinom.hpp"

extern int yylex();

void yyerror(string s) {

	cerr<<"Sintaksna greska: "<<s<<endl;
	exit(EXIT_FAILURE);
}

map<string, Polinom*> promenljive;

void obrisi(){

	for (auto it = promenljive.begin(); it != promenljive.end(); it++) {
	
		delete it->second;
	}
}

%}

%nonassoc EQ NEQ
%left '+' '-'
%left '*'
%right UMINUS  
%left '\''

%union {
	double x;
	string* ime;
	Polinom* p;
}

%token DODELA EQ NEQ
%token<x> BROJ
%token<ime> ID

%type<p> izraz lista polinom

%start program

%%

program: naredba '\n' program	{	}
	| 
	;
naredba: izraz			{	
							//cout<<"Stampam"<<endl;
							cout<<(*$1)<<endl; delete $1; 
						}
	| ID DODELA izraz	{	
							auto it = promenljive.find(*$1);
							if (it != promenljive.end())
								delete it->second;
							
							promenljive[*$1] = $3;
							delete $1;
						}
	| izraz EQ izraz	{ 	
							if (*$1 == *$3) {
								cout<<"True"<<endl;
							}
							else {
								cout<<"False"<<endl;
							}
							delete $1;
							delete $3;
						}
	| izraz NEQ izraz	{	
							if (*$1 == *$3) {
								cout<<"False"<<endl;
							}
							else {
								cout<<"True"<<endl;
							}
							delete $1;
							delete $3;
						}
	| izraz '[' BROJ ']'{ cout<<($1->valueAt($3))<<endl; delete $1;}
	;
izraz: izraz '+' izraz	{ $$ = *$1 + *$3; delete $1; delete $3; }
	| izraz '-' izraz	{ $$ = *$1 - *$3; delete $1; delete $3; }
	| izraz '*' izraz	{ $$ = *$1 * *$3; delete $1; delete $3; }
	| '-' izraz	%prec UMINUS	{ $$ = -(*$2); delete $2;}
	| '(' izraz ')'	{ $$ = $2; }
	| izraz '\''	{ $$ = $1->izvod(); delete $1;}
	| '$' izraz '|' BROJ	{$$ = $2->integral($4); delete $2;}
	| ID	{ 
				auto it = promenljive.find(*$1);
				if (it == promenljive.end()) {
					yyerror("Promenljiva nije definisana\n");
				}
				//cout<<"Nasao"<< endl;
				$$ = new Polinom(*(it->second));
				//cout<<"Iskopirao"<< endl;
				delete $1;
				//cout<<"Obrisao"<< endl;
			}
	| polinom	{ $$ = $1; }
	;
polinom: '<' lista '>'	{$$ = $2;}
	;
lista: lista ',' BROJ	{$1 -> insert($3); $$ = $1;}
	| BROJ				{$$ = new Polinom(); $$->insert($1);}
	;

%%

int main() {

	if (yyparse() == 0) {
		cout<<"Sve je ok"<<endl;
	}
	else {
		cout<<"Greska"<<endl;
	}
	
	obrisi();
	
	exit(EXIT_SUCCESS);
}
