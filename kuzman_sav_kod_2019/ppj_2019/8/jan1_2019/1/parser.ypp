%{

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

#include "broj.hpp"

extern int yylex();

void yyerror(string s){

	cerr<<"Sintaksna greska: "<<s<<endl;
	exit(EXIT_FAILURE);
}

map<string, Broj*> promenljive;

void deinicijalizuj(){
	
	for (auto it = promenljive.begin(); it != promenljive.end(); it++) {
	
		delete it->second;
	}
}

%}

%union{
	
	int x;
	string* ime;
	Broj* b;
}

%left EQ_T NEQ_T
%left '|'
%left '^'
%left '&'
%left SHL_T SHR_T
%left PLUS_T MINUS_T
%left '*' '/' '%'
%right '~'
%right UMINUS

%token INT_T PRINT_T LIST_T SHL_T SHR_T EQ_T NEQ_T PLUS_T MINUS_T
%token<x> BROJ
%token<ime> ID

%type<b> izraz lista elementi
%type<x> broj

%start program

%%

program: naredba ';' program		{ }
	|								{ }
	;
naredba: INT_T ID '=' izraz		{ 
									auto it = promenljive.find(*$2);
									if (it != promenljive.end()) {
										yyerror("Promenljiva je vec definisana");
									}
									
									promenljive[*$2] = $4;
									delete $2;
								}
	| INT_T ID 					{ 
									auto it = promenljive.find(*$2);
									if (it != promenljive.end()) {
										yyerror("Promenljiva je vec definisana");
									}
									
									promenljive[*$2] = new Broj(0);
									delete $2;
								}
	| ID '=' izraz 				{
									auto it = promenljive.find(*$1);
									if (it == promenljive.end()) {
										yyerror("Promenljiva nije definisana");
									}
									
									delete it->second;
									
									promenljive[*$1] = $3;
									delete $1;
								}
	| PRINT_T '(' izraz ',' BROJ ')' { $3->show($5); delete $3; }
	| PRINT_T '(' izraz ')'		{ cout<<(*$3)<<endl; delete $3;}
	| izraz EQ_T izraz		{ 
								if (*$1 == *$3) {
									cout<<"True"<<endl;
								}
								else {
									cout<<"False"<<endl;
								}
								delete $1;
								delete $3;
							}
	| izraz NEQ_T izraz 	{ 
								if (*$1 != *$3) {
									cout<<"True"<<endl;
								}
								else {
									cout<<"False"<<endl;
								}
								delete $1;
								delete $3;
							}
	| LIST_T ID '=' lista	{ 
								auto it = promenljive.find(*$2);
								if (it != promenljive.end()) {
									yyerror("Promenljiva je vec definisana");
								}
								
								promenljive[*$2] = $4;
								delete $2;
							}
	;
izraz : izraz PLUS_T izraz	{$$ = *$1 + *$3; delete $1; delete $3;}
	| izraz MINUS_T izraz {$$ = *$1 - *$3; delete $1; delete $3;}
	| izraz '*' izraz	{$$ = *$1 * *$3; delete $1; delete $3;}
	| izraz '/' izraz 	{$$ = *$1 / *$3; delete $1; delete $3;}
	| izraz '%' izraz	{$$ = *$1 % *$3; delete $1; delete $3;}
	| izraz SHL_T izraz {$$ = *$1 << *$3; delete $1; delete $3;}
	| izraz SHR_T izraz {$$ = *$1 >> *$3; delete $1; delete $3;}
	| izraz '&' izraz	{$$ = *$1 & *$3; delete $1; delete $3;}
	| izraz '|' izraz 	{$$ = *$1 | *$3; delete $1; delete $3;}
	| izraz '^' izraz	{$$ = *$1 ^ *$3; delete $1; delete $3;}
	| MINUS_T izraz %prec UMINUS {$$ = -*$2, delete $2;}
	| '~' izraz	{$$ = ~*$2; delete $2;}
	| '(' izraz ')' {$$ = $2;}
	| ID	{
				auto it = promenljive.find(*$1);
				if (it == promenljive.end()) {
					yyerror("Promenljiva nije definisana");
				}
				
				$$ = new Broj(*(it->second));
				delete $1;
			}
	| BROJ {$$ = new Broj($1);}
	| ID '[' BROJ ']' {
						auto it = promenljive.find(*$1);
						if (it == promenljive.end()) {
							yyerror("Promenljiva nije definisana");
						}
						
						$$ = new Broj((*(it->second))[$3]);
						
						delete $1;
					}
	;
lista : '[' elementi ']' {
							$$ = $2;
						 }
	;
elementi: elementi ',' broj	{
									$1->push_back($3);
									$$ = $1;
								}
	| broj					{ 
								$$ = new Broj($1);						
							}
broj : BROJ					{ $$ = $1;}
	| MINUS_T BROJ			{ $$ = -$2;}
%%

int main(int argc, char** argv) {

	if (yyparse() == 0) {
		cout<<"Program je ok"<<endl;
	}
	else {
		cout<<"Program nije ok"<<endl;
	}
	
	deinicijalizuj();

	exit(EXIT_SUCCESS);
}
