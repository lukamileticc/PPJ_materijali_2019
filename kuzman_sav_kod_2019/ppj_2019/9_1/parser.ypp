%{

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <map>

using namespace std;

#include "skup.hpp"

extern int yylex();

void yyerror(string s) {
	
	cerr<<"Sintaksna greska: "<<s<<endl;
	exit(EXIT_FAILURE);
}

map<string, Skup*> promenljive;
Skup* uniSet = NULL;

void obrisi(void) {

	for (auto it = promenljive.begin(); it != promenljive.end(); it++) {
		
		delete it->second;
	}
}

%}

%union{
	int x;
	string* ime;
	Skup* s;
}

%left UNIJA_T
%left PRESEK_T RAZLIKA_T
%right '~'

%token PRINT_T CHECK_T CARD_T UNI_T PRESEK_T UNIJA_T RAZLIKA_T TT
%token<x> BROJ
%token<ime> ID

%type<s> lista skup izraz

%start program

%%

program: naredba ';' program	{}
	|			{}
	;
naredba: ID '=' izraz		{
								auto it = promenljive.find(*$1);
									if (it != promenljive.end()) {
										delete it->second;
									}
									
									promenljive[*$1] = $3;
									delete $1;
							}
	| ID '=' BROJ TT BROJ		{
									auto it = promenljive.find(*$1);
									if (it != promenljive.end()) {
										delete it->second;
									}
									
									if ($3 > $5) {
										yyerror("Format error\n");
									}
									
									promenljive[*$1] = new Skup($3, $5);
									delete $1;
								}
	| PRINT_T izraz			{
								cout<<(*$2)<<endl;
								delete $2;
							}
	| CARD_T izraz			{
								cout<<($2->card())<<endl;
								delete $2;
							}
	| CHECK_T BROJ ':' izraz	{
									if ($4->find($2)) {
										cout<<"True"<<endl;
									}
									else {
										cout<<"False"<<endl;
									}
									delete $4;
								}
	| CHECK_T izraz '<' izraz	{
									if ($4->subset(*$2)) {
										cout<<"True"<<endl;
									}
									else {
										cout<<"False"<<endl;
									}
									delete $4;
									delete $2;
								}
	| UNI_T '=' BROJ TT BROJ	{
									if (uniSet != NULL) {
										delete uniSet;
									}
									
									if ($3 > $5) {
										yyerror("Format error\n");
									}
									
									uniSet = new Skup($3, $5);
								}
	;
izraz: izraz UNIJA_T izraz 	{ $$ = *$1 + *$3; delete $1; delete $3;}
	| izraz PRESEK_T izraz	{ $$ = *$1 * *$3; delete $1; delete $3;}
	| izraz RAZLIKA_T izraz	{ $$ = *$1 - *$3; delete $1; delete $3;}
	| '~' izraz		{
						if (uniSet == NULL) {
							yyerror("Univerzalni skup nije definisan\n");
						}
						
						$$ = uniSet->komplement(*$2);
						delete $2;
					}
	| '(' izraz ')' {
						$$ = $2;
					}
	| ID	{
				auto it = promenljive.find(*$1);
				if (it == promenljive.end())
					yyerror("Promenljiva nije definisana\n");
					
				$$ = new Skup(*(it->second));
				delete $1;
			}
	| skup	{$$ = $1;}
	;
skup: '{' lista '}'	{$$ = $2;}
	;
lista: lista ',' BROJ	{$1->insert($3); $$ = $1;}
	| BROJ		{$$ = new Skup(); $$->insert($1);}
	;

%%

int main(){

	if (yyparse() == 0) {
		
		cout<<"Sve je ok"<<endl;
	}
	else {
		cout<<"Viska tokena na ulazu"<<endl;
	}
	
	obrisi();
	
	exit(EXIT_SUCCESS);
}
