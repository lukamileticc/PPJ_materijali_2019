%{

#include <iostream>
#include <string>
#include <map>
#include <vector>

#define YYDEBUG 1

std::map<std::string, int> promenljive;
std::map<std::string, std::vector<int>* > liste;


extern int yylex();

void yyerror(const std::string& poruka){
  std::cerr << poruka << std::endl;
  exit(EXIT_FAILURE);
}

void stampaj(int broj, int osnova){
  if (osnova ==  10 )
    printf("%d",broj);
  else if(osnova == 16)
    printf("%x",broj);
  else if(osnova == 8)
    printf("%o",broj);
  else {
   yyerror("Nepodrzana osnova!");
  }
  std::cout  << std::endl;
}

void stampaj_listu(std::vector<int> * l){
  std::cout << "[ ";

  for(unsigned i = 0; i<l->size(); i++ ){
    std::cout << (*l)[i];
    if( i!= l->size()-1)
      std::cout << ", ";
  }

  std::cout << "]" << std::endl;
}

%}

%union {
  int broj;
  std::string* ime;
  std::vector<int> * elementi;
}

%left '|'
%left '^'
%left '&'
%left SHR SHL
%left '+' '-'
%left '*' '/'
%right '~' UMINUS

%token PRINT INT LIST EQV
%token<ime> ID
%token<broj> BROJ
%token<ime> LID

%type<broj> izraz
%type<elementi> lista_vrednosti lista_izraz

%start program

%%

program:  program naredba ';'{}
  | naredba ';' {}
	;

naredba:  INT ID  {
        if (promenljive.find(*$2) != promenljive.end()){
		      yyerror("Vec deklarisana promenljiva!");
		    }
		    
        promenljive[*$2] = 0;
		    delete $2;
		  }
  | INT ID '=' izraz {
            if (promenljive.find(*$2) != promenljive.end()){
              yyerror("Vec deklarisana promenljiva!");
            }

            promenljive[*$2] = $4;
			      delete $2;
			     }
  | ID '=' izraz  {
            if (promenljive.find(*$1) == promenljive.end()){
              yyerror("Nije deklarisana promenljiva!");
			      }
            promenljive[*$1] = $3;
            delete $1;
			    }
  | PRINT '(' izraz ')'  {
             stampaj($3, 10);
			      }
  | PRINT '(' izraz ',' BROJ ')'  {
            if ($5 != 8 && $5 != 10 && $5 != 16) {
               yyerror("Nepodrzana osnova!");
              }
					
            stampaj($3, $5);
					}
  | PRINT '(' lista_izraz ')' {
              stampaj_listu($3);
           }
  | izraz EQV izraz  {
            if ($1 == $3)
              std::cout << "True!" << std::endl;
            else std::cout << "False!" << std::endl;
          }

  | LIST LID '=' lista_izraz {
              if (liste.find(*$2) != liste.end()){
                yyerror("Vec deklarisana lista!");
              }

              liste[*$2] = $4;
              delete $2;
            }
	;

izraz:  izraz '+' izraz { $$ = $1 + $3; }
      | izraz '-' izraz { $$ = $1 - $3; }
      | izraz '*' izraz { $$ = $1 * $3; }
      | izraz '/' izraz { $$ = $1 / $3; }
      | izraz '&' izraz { $$ = $1 & $3; }
      | izraz '|' izraz { $$ = $1 | $3; }
      | izraz '^' izraz { $$ = $1 ^ $3; }
      | izraz SHR izraz { 
                      if ($3 <= 0){
                        yyerror("Drugi operand mora biti veci od 0 !");
                      }
                      $$ = $1 >> $3;
                    }
      | izraz SHL izraz { 
                      if ($3 <= 0){
                        yyerror("Drugi operand!");
                      }
                      $$ = $1 << $3;
                    }
      | '~' izraz       { $$ = ~$2; }
      | '-' izraz   %prec UMINUS {$$ = -$2;}
      | '(' izraz ')'   { $$ = $2; }
      | BROJ            {$$ = $1;}
      | ID         {
            if (promenljive.find(*$1) == promenljive.end()){
              yyerror(*$1 + " nije deklarisana!");
            }
		    
            $$ = promenljive[*$1];
            delete $1;
          }
       | LID '[' BROJ ']' {
            if (liste.find(*$1) == liste.end() ){
              yyerror(*$1 + " nije deklarisana lista!");
            }
            $$ = (*liste[*$1])[$3];
            delete $1;  }
      ;

lista_izraz:  '[' lista_vrednosti ']'  {
              $$= $2;
          }
        | LID {
            if (liste.find(*$1) == liste.end() ){
              yyerror(*$1 + " nije deklarisana lista!");
            }
            $$ = new std::vector<int>(*liste[*$1]);
            delete $1;  }
      ;

lista_vrednosti : lista_vrednosti ',' izraz   { $$ = $1;
                                               $$->push_back($3); }
      | izraz    { $$ = new std::vector<int>();
            $$->push_back($1);}
      ;

%%

int main()
{
  yydebug = 0;
  if (yyparse() != 0) {
    yyerror("greska");
  }
  
  exit(EXIT_SUCCESS);
}
